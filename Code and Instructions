**User Manual & Annotated R Scripts: Climate Change Affecting Air Quality Data**

---

## Overview

This repository hosts R scripts for analyzing the impact of climate change on air quality across multiple locations and years. It is structured into five modules:

1. **01\_data\_cleaning.R** – Import and clean raw data
2. **02\_CCM\_analysis.R** – Conduct Convergent Cross Mapping to test causality
3. **03\_surrogate\_test.R** – Perform surrogate significance testing
4. **04\_PD\_analysis.R** – Analyze dynamic interaction strengths via S-Map (partial derivatives)
5. **05\_correlation\_analysis.R** – Compute and visualize correlations

Each script includes:

* **Header summary**: Purpose, inputs, outputs
* **Inline comments**: Key steps explained
* **Execution instructions**
* **Output locations** for results

---

## Prerequisites

* **R ≥ 4.0.0** and **RStudio** (optional but recommended)
* Internet connection for package installation

### Install Required Packages

```r
# Core dependencies
install.packages(c(
  "readxl","writexl","zoo","dplyr","ggplot2","VIM",
  "parallel","corrplot","GGally","ggpubr","tidyr"
))
# rEDM from GitHub
if (!require("rEDM")) {
  install.packages("devtools")
  devtools::install_github("SugiharaLab/rEDM")
}
```

---

## Repository Structure

```
├── 01_data_cleaning.R
├── 02_CCM_analysis.R
├── 03_surrogate_test.R
├── 04_PD_analysis.R
├── 05_correlation_analysis.R
├── data/            # Raw Excel files (e.g., Camal_2004.xlsx)
├── results/         # Cleaned data & plots
│   ├── Cleaned_Camal_2004.xlsx
│   ├── CCM_Carapungo_RH_PM2.5.png
│   └── ...
└── README.md        # This user manual
```

---

## Module Details

### 01\_data\_cleaning.R

**Purpose:**

* Load raw Excel data
* Trim column names
* Convert and validate `Date`
* Identify numeric columns
* Visualize missingness
* Impute missing values hierarchically:

  1. Linear interpolation
  2. Forward/backward fill
  3. Mean, then median fallback
* Save fully imputed dataset

**Run:**

```bash
Rscript 01_data_cleaning.R
```

```r
# 01_data_cleaning.R
# Summary: Cleans raw air quality dataset and imputes missing values.
install.packages(c("VIM","readxl","zoo","ggplot2","dplyr","writexl"))
library(VIM); library(readxl); library(zoo)
library(ggplot2); library(dplyr); library(writexl)

df <- read_excel("data/Camal_2004.xlsx")
colnames(df) <- trimws(colnames(df))
if(!"Date" %in% names(df)) stop("Missing 'Date' column.")
df$Date <- as.Date(df$Date, origin="1899-12-30")

numeric_cols <- intersect(names(df), c(
  "ElCamal_T","ElCamal_RH","ElCamal_WS","ElCamal_WD",
  "ElCamal_P","ElCamal_Rain","ElCamal_CO","ElCamal_NO2",
  "ElCamal_SO2","ElCamal_O3","ElCamal_PM2.5"
))
if(length(numeric_cols)==0) stop("No numeric columns found.")

# Visualize missingness
df %>% select(all_of(numeric_cols)) %>% aggr(col=c("navy","red"))

ggplot(df, aes(x=Date, y=rowSums(is.na(df[numeric_cols])))) +
  geom_line(color="firebrick") +
  labs(title="Missing Values Over Time", x="Date", y="Count") +
  theme_minimal()

# Imputation loop
for(col in numeric_cols) {
  df[[col]] <- na.approx(df[[col]], na.rm=FALSE)
  df[[col]] <- na.locf(df[[col]], na.rm=FALSE)
  df[[col]] <- na.locf(df[[col]], fromLast=TRUE)
  if(any(is.na(df[[col]]))) df[[col]][is.na(df[[col]])] <- mean(df[[col]], na.rm=TRUE)
  if(any(is.na(df[[col]]))) df[[col]][is.na(df[[col]])] <- median(df[[col]], na.rm=TRUE)
}

# Save output
out <- "results/Cleaned_Camal_2004.xlsx"
if(sum(is.na(df[numeric_cols]))==0) write_xlsx(df, out) else warning("NAs remain.")
```

---

### 02\_CCM\_analysis.R

**Purpose:**

* Load cleaned data
* Run CCM between a meteorological driver (e.g., RH) and pollutant (e.g., PM2.5)
* Generate bidirectional prediction skill plots

**Run:**

```bash
Rscript 02_CCM_analysis.R
```

```r
# 02_CCM_analysis.R
# Summary: Tests causality using rEDM's CCM and saves skill-vs-library-size plots.

if(!require(devtools)) install.packages("devtools")
if(!require(rEDM)) devtools::install_github("SugiharaLab/rEDM")
library(rEDM); library(readxl); library(parallel)

# Load data
data <- read_excel("results/Cleaned_Carapungo_2005.xlsx")
data$Date <- as.Date(data$Date)
data <- data[order(data$Date),]

# Parameters
met <- "Carapungo_RH"
pollutants <- c("Carapungo_PM2.5")
E <- 6; libSizes <- "10 500 10"; sample <- 100
threads <- if("numThreads" %in% names(formals(CCM))) detectCores()-1 else NULL

# CCM loop
for(poll in pollutants) {
  out <- CCM(dataFrame=data, columns=met, target=poll,
             E=E, Tp=0, libSizes=libSizes, sample=sample,
             numThreads=threads)
  fwd <- out[[paste(met,poll,":")]]
  rev <- out[[paste(poll,met,":")]]
  lib  <- out$LibSize
  png(sprintf("results/CCM_%s_%s.png",met,poll),800,400)
    plot(lib, fwd, type="l", col="blue", xlab="Library Size",
         ylab="ρ", main=paste(met,"vs",poll))
    lines(lib, rev, col="red")
    legend("bottomright", c(met,poll), col=c("blue","red"), lty=1)
  dev.off()
}
```

---

### 03\_surrogate\_test.R

**Purpose:**

* Calculate original CCM skill
* Generate seasonal surrogates
* Run CCM on each surrogate (parallelized)
* Compute p-value and confidence intervals
* Plot surrogate distribution with original skill

**Run:**

```bash
Rscript 03_surrogate_test.R
```

```r
# 03_surrogate_test.R
# Summary: Validates CCM results against seasonal surrogates to test significance.

rm(list=ls())
library(rEDM); library(readxl); library(parallel)

data <- read_excel("results/Cleaned_Carapungo_2024.xlsx")
data$Date <- as.Date(data$Date); data <- data[order(data$Date),]

driver <- "Carapungo_PM2.5"; target <- "Carapungo_RH"
E <- 6; num_surr <- 1000; period <- 365; libSize <- "500 500 1"

# Original CCM
orig <- CCM(data, E=E, Tp=0, columns=driver,
            target=target, libSizes=libSize, sample=1)[1,2]

# Surrogates
drv_surr <- SurrogateData(data[[driver]], method="seasonal",
                           T_period=period, num_surr=num_surr)
surr_df <- data.frame(time=1:nrow(data),
                      target=data[[target]], drv_surr)

# Parallel CCM on surrogates
cl <- makeCluster(detectCores()-1)
clusterExport(cl, c("surr_df","E","libSize","target","CCM"))
rho <- parSapply(cl, 1:num_surr, function(i) {
  CCM(surr_df, E=E, Tp=0, columns=paste0("S",i),
      target=target, libSizes=libSize, sample=1)[1,2]
})
stopCluster(cl)

# Stats
iCDF <- ecdf(rho)
p_val <- 1 - iCDF(orig)
ci <- quantile(rho, c(0.025,0.975))
cat(sprintf("ρ=%.3f; p=%.3f; 95%%CI=[%.3f,%.3f]\n", orig, p_val, ci[1], ci[2]))

# Plot
g <- hist(rho, breaks=30, plot=FALSE)
png("results/surrogate_hist.png",600,400)
plot(g, main="Surrogate CCM Skill", xlab=expression(rho))
abline(v=orig, col="red"); abline(v=quantile(rho,0.95), col="blue", lty=2)
dev.off()
```

---

### 04\_PD\_analysis.R

**Purpose:**

* Determine optimal embedding dimension
* Run S-Map in both causal directions
* Extract and plot S-Map coefficients over time

**Run:**

```bash
Rscript 04_PD_analysis.R
```

```r
# 04_PD_analysis.R
# Summary: Uses S-Map to track dynamic interaction strengths between variables.

library(rEDM); library(ggplot2); library(readxl)

data <- read_excel("results/Cleaned_Belisario_2024.xlsx")
colnames(data)[-1] <- c("Temp","RH","WS","WD","Pressure",
                        "Solar","Rain","CO","NO2","SO2","O3","PM25")

# Optimal E
ed <- EmbedDimension(data, columns="RH", target="RH",
                     lib="1 400", pred="1 400", maxE=10)
bestE <- ed$E[which.max(ed$rho)]

# S-Map both ways
sm1 <- SMap(data, lib="1 400", pred="1 400", E=bestE,
            theta=1, columns="PM25", target="RH", embedded=TRUE)
sm2 <- SMap(data, lib="1 400", pred="1 400", E=bestE,
            theta=1, columns="RH", target="PM25", embedded=TRUE)

# Extract coefficients
c1 <- sm1$coefficients[[grep("PM25", names(sm1$coefficients))]]
c2 <- sm2$coefficients[[grep("RH", names(sm2$coefficients))]]
n <- min(length(c1), length(c2))
df <- data.frame(Time=1:n, PM25_to_RH=c1[1:n], RH_to_PM25=c2[1:n])

# Plot & save
p <- ggplot(df, aes(Time)) +
  geom_line(aes(y=PM25_to_RH, color="PM2.5→RH")) +
  geom_line(aes(y=RH_to_PM25, color="RH→PM2.5")) +
  geom_hline(yintercept=0, linetype="dashed") +
  labs(title="Interaction Strengths (S-Map)", x="Time", y="Coefficient") +
  theme_minimal()
ggsave("results/PD/interaction_plot.png", p,
       width=10, height=6, dpi=300)
```

---

### 05\_correlation\_analysis.R

**Purpose:**

* Calculate Pearson correlation between RH and PM2.5
* Generate scatterplots with regression lines for four datasets
* Arrange plots in a 2×2 grid

**Run:**

```bash
Rscript 05_correlation_analysis.R
```

```r
# 05_correlation_analysis.R
# Summary: Creates 2×2 grid of RH vs PM2.5 correlations for multiple sites/years.

# Helper
install_if_missing <- function(pkg){ if(!require(pkg)){ install.packages(pkg); library(pkg) }}
lapply(c("readxl","dplyr","ggplot2","ggpubr"), install_if_missing)

# Load data
b04 <- read_excel("results/Cleaned_Belisario_2004.xlsx")
b24 <- read_excel("results/Cleaned_Belisario_2024.xlsx")
c05 <- read_excel("results/Cleaned_Cotocollao_2005.xlsx")
c24 <- read_excel("results/Cleaned_Cotocollao_2024.xlsx")

# Plot function
cor_plot <- function(df, loc, yr) {
  df2 <- df %>% select(RH, PM2.5) %>% drop_na()
  r <- cor(df2$RH, df2$PM2.5)
  ggplot(df2, aes(RH, PM2.5)) +
    geom_point(alpha=0.5) +
    geom_smooth(method="lm", se=FALSE) +
    labs(title=paste(loc, yr, "(r=", round(r,2), ")"), x="RH", y="PM2.5") +
    theme_minimal()
}

# Create and arrange
plots <- list(
  cor_plot(b04, "Belisario", 2004),
  cor_plot(b24, "Belisario", 2024),
  cor_plot(c05, "Cotocollao", 2005),
  cor_plot(c24, "Cotocollao", 2024)
)

library(ggpubr)
ggarrange(plotlist=plots, ncol=2, nrow=2)
```
